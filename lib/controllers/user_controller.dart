import 'package:cloud_firestore/cloud_firestore.dart';
import 'package:firebase_auth/firebase_auth.dart';
import 'package:flutter/material.dart';
import '../database/user_dao.dart';
import '../models/user.dart';

class UserController {
  final UserDAO _dao = UserDAO();

  // Sign-up a new user
  Future<String?> signUp(UserModel user, String password) async {
    try {
      // Check if the phone number is unique
      if (!await _dao.isPhoneNumberUnique(user.phone)) {
        return "Phone number already in use.";
      }

      // Check if the email is unique
      if (!await _dao.isEmailUnique(user.email)) {
        return "Email is already in use.";
      }

      // Create user with FirebaseAuth
      UserCredential userCredential = await FirebaseAuth.instance
          .createUserWithEmailAndPassword(email: user.email, password: password);

      // Retrieve UID generated by FirebaseAuth
      String userId = userCredential.user!.uid;

      // Save user details in Firestore
      UserModel newUser = UserModel(
        uid: userId,
        name: user.name,
        email: user.email,
        phone: user.phone,
      );
      await _dao.addUser(newUser);

      return null; // Success
    } catch (e) {
      return e.toString(); // Return error message
    }
  }


  // Login user
  Future<bool> loginUser(BuildContext context, String email, String password) async {
    try {
      UserCredential userCredential =
      await FirebaseAuth.instance.signInWithEmailAndPassword(
        email: email,
        password: password,
      );

      // Navigate to home screen
      Navigator.pushNamed(context, '/home');
      return true;
    } on FirebaseAuthException catch (e) {
      print('Error: ${e.message}');
      return false;
    }
  }

  // Get current user
  Future<UserModel?> getCurrentUser() async {
    try {
      // Retrieve the current user from FirebaseAuth
      User? firebaseUser = FirebaseAuth.instance.currentUser;

      if (firebaseUser != null) {
        // Fetch additional user details from Firestore
        UserModel? userDetails = await _dao.getUserByUID(firebaseUser.uid);
        return userDetails;
      } else {
        // No user is currently logged in
        return null;
      }
    } catch (e) {
      print('Error retrieving current user: ${e.toString()}');
      return null;
    }
  }

  Future<bool> logout() async{
    try {
      await FirebaseAuth.instance.signOut();
      return true;
    } catch (e) {
      return false;
    }
  }

  Future<bool> setName(String uid,String name) async{
    print("Controller");

    return _dao.setName(uid, name);
  }

  Future<bool> setPhoneNumber(String uid, String phone){
    return _dao.setPhoneNumber(uid, phone);
  }


  Future<String> addFriend(String phoneNumber) async {
    final firestore = FirebaseFirestore.instance;

    // Get the current user details
    final currentUser = await getCurrentUser();

    if (currentUser == null) {
      print("No current user found.");
      return "No current user found.";
    }

    final currentUserId = currentUser.uid;

    // Step 1: Fetch user by phone number
    final querySnapshot = await firestore
        .collection('users')
        .where('phone', isEqualTo: phoneNumber)
        .get();

    if (querySnapshot.docs.isNotEmpty) {
      final newUser = querySnapshot.docs.first;
      final newUserId = newUser.id;

      // Step 2: Check if friendship already exists
      final friendsQuery = await firestore
          .collection('friends')
          .where('user1_id', whereIn: [currentUserId, newUserId])
          .where('user2_id', whereIn: [currentUserId, newUserId])
          .get();

      if (friendsQuery.docs.isEmpty) {
        // Step 3: Add friendship to 'friends' collection
        await firestore.collection('friends').add({
          'user1_id': currentUserId,
          'user2_id': newUserId,
          'created_at': FieldValue.serverTimestamp(),
        });

        print("Friendship added successfully!");
        return "Friendship added successfully!";
      } else {
        print("Friendship already exists!");
        return "Friendship already exists!";
      }
    } else {
      print("No user found with this phone number.");
      return "No user found with this phone number.";
    }
  }

  Future<List<UserModel>> fetchFriends() async {
    final firestore = FirebaseFirestore.instance;

    // Get the current user details
    final currentUser = await getCurrentUser();

    if (currentUser == null) {
      print("No current user found.");
      return [];
    }

    final currentUserId = currentUser.uid;

    // Step 1: Fetch friend IDs where currentUserId is either user1_id or user2_id
    final querySnapshot1 = await firestore
        .collection('friends')
        .where('user1_id', isEqualTo: currentUserId)
        .get();

    final querySnapshot2 = await firestore
        .collection('friends')
        .where('user2_id', isEqualTo: currentUserId)
        .get();

    // Combine friend IDs from both queries
    final friendIds = [
      ...querySnapshot1.docs.map((doc) => doc.data()['user2_id']),
      ...querySnapshot2.docs.map((doc) => doc.data()['user1_id']),
    ];

    // Remove duplicates by converting to a set and back to a list
    final uniqueFriendIds = friendIds.toSet().toList();

    List<UserModel> friendsList = [];

    // Step 2: Fetch user details for each unique friend ID
    for (String friendId in uniqueFriendIds) {
      final userDoc = await firestore.collection('users').doc(friendId).get();
      if (userDoc.exists) {
        // Convert Firestore data to UserModel
        final userModel = UserModel.fromFirestore(userDoc.data()!);
        friendsList.add(userModel);
      }
    }

    return friendsList; // List of UserModel objects
  }

}
